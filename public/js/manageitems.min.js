function submitQrCode() {
    var a = $("#selectedId").html(),
        b = $("#UserId").html(),
        c = window.open("about:blank");
    c.document.open(), c.document.write('<!DOCTYPE html><html class="no-js" lang="fr"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>QRCODE</title><link rel="stylesheet" href="' + PUBLIC_ABSOLUTE_PATH + '/libs/foundation/css/normalize.css"><link rel="stylesheet" href="' + PUBLIC_ABSOLUTE_PATH + '/libs/foundation/css/foundation.min.css"><link rel="stylesheet"  href="' + PUBLIC_ABSOLUTE_PATH + '/libs/font-awesome/css/font-awesome.min.css"></head><h1 id="ContName"></h1><div id="qrcode"></div><button id="printReport" class="button hide-for-print" onclick="window.print()">Imprimer <i class="fa fa-print"></i></button></body></html>');
    var d = SERVER_ABSOLUTE_PATH + "/objets/getInfosQrCode";
    
    $.post(d, {
        object: a,
        userId: b
    }, function(b) {
        var f = c.document.createTextNode(b.name);
        c.document.getElementById("ContName").appendChild(f);
        new QRCode(c.document.getElementById("qrcode"), "objet: " + b.name + "\n\ncontient: \n" + b.children + "\n" + SERVER_ABSOLUTE_PATH + "/objets/show/" + a), c.document.close(), c.focus()
    }, "json")
}

function newSelectedObject(a, b) {
    var c = SERVER_ABSOLUTE_PATH + "/objets/getTableau";
    $.post(c, {
        object: a,
        user: b,
        nb: "8"
    }, function(c) {
        updateTabItems(c, b), window.history.pushState("Test", "Objets - Patrimoine", SERVER_ABSOLUTE_PATH + "/objets/show/" + a);
        var d = 0 == $("#parentId").length ? null : $("#parentId").html();
        updateButtons(a, b), updateInfos(a, b), updateTabDeplacements(d, b, a), clearImageList(), loadImages($("#selectedId").html())
    }, "json"), $(".addExcSwitch").prop("checked", !1), clearAddModal()
}

function updateButtons(a, b) {
    var c = SERVER_ABSOLUTE_PATH + "/objets/isObjectEditable";
    $.post(c, {
        object: a,
        user: b
    }, function(a) {
        if ("true" == a ? ($("#btnMoveItem").removeClass("disabled"), $("#btnLendItem").removeClass("disabled"), $("#btnEditItem").removeClass("disabled"), $("#btnRemoveItem").removeClass("disabled")) : ($("#btnMoveItem").addClass("disabled"), $("#btnLendItem").addClass("disabled"), $("#btnEditItem").addClass("disabled"), $("#btnRemoveItem").addClass("disabled")), 0 == $("#parentId").length) {
            $("#btnMoveItem").addClass("disabled"), $("#btnLendItem").addClass("disabled")
        }
    })
}

function showMore(a, b, c) {
    var d = SERVER_ABSOLUTE_PATH + "/objets/getTableau";
    $.post(d, {
        object: a,
        user: b,
        nb: c
    }, function(a) {
        updateTabItems(a, b), $("#ObjectTab > table > tbody > tr > td:last").get(0).scrollIntoView()
    }, "json")
}

function updateTabItems(a, b) {
    $("#ObjectTab").html(""), $("#ObjectTab").append("<table>"), $.each(a, function(a, c) {
        $("#ObjectTab > table").append("<tr>"), c.head ? ($("#ObjectTab > table > tbody > tr:last").append("<th>"), c.link ? ($("#ObjectTab > table > tbody > tr > th:last").append('<a href="#" id="parent"' + c.id + ' onclick="newSelectedObject(' + c.id + "," + b + ')">' + c.name + '</a><div class="hide" id="parentId">' + c.id + "</div>"), $("input[name='objectId']").val(c.id)) : ($("#ObjectTab > table > tbody > tr:last").append('<div id="selectedId" hidden="true">' + c.id + "</div>"), $("#ObjectTab > table > tbody > tr > th:last").append(c.name))) : c.plus ? ($("#ObjectTab > table > tbody > tr:last").append("<strong>"), $("#ObjectTab > table > tbody > tr:last > strong:last").append("<td>"), $("#ObjectTab > table > tbody > tr:last > strong:last > td:last").append('<a href="#" onclick="showMore(' + $("#selectedId").html() + "," + b + "," + (parseInt(c.nb) + 8) + ')">' + c.name + "</a>")) : c.container ? ($("#ObjectTab > table > tbody > tr:last").append("<td>"), $("#ObjectTab > table > tbody > tr > td:last").append('<a href="#" onclick="newSelectedObject(' + c.id + "," + b + ')">' + c.name + "</a>")) : ($("#ObjectTab > table > tbody > tr:last").append('<em class="small-tab">'), $("#ObjectTab > table > tbody > tr:last > em:last").append("<td>"), $("#ObjectTab > table > tbody > tr:last > em:last > td:last").append('<a href="#" onclick="newSelectedObject(' + c.id + "," + b + ')">' + c.name + "</a>"))
    }), $("#ObjectTab").append("</table>")
}

function updateTabDeplacements(a, b, c) {
    $("#MoveTab").html("");
    var d = SERVER_ABSOLUTE_PATH + "/objets/getMoveTab";
    $.post(d, {
        object: a,
        user: b,
        base: c
    }, function(a) {
        $("#MoveTab").append("<table>"), $.each(a, function(a, d) {
            $("#MoveTab > table").append("<tr>"), d.head ? ($("#MoveTab > table > tbody > tr:last").append("<th>"), d.link ? ($("#MoveTab > table > tbody > tr > th:last").append('<a href="#" onclick="updateTabDeplacements(' + d.id + "," + b + "," + c + ')">' + d.name + "</a>"), $("input[name='objectId']").val(d.id)) : ($("#MoveTab > table > tbody > tr:last").append('<div id="selectedMoveId" hidden="true">' + d.id + "</div>"), $("#MoveTab > table > tbody > tr > th:last").append(d.name), $("#btnMoveSubmit").unbind("click"), $("#btnMoveSubmit").click(function() {
                submitMoveItem($("#selectedId").html(), d.id)
            }))) : ($("#MoveTab > table > tbody > tr:last").append("<td>"), $("#MoveTab > table > tbody > tr > td:last").append('<a href="#" onclick="updateTabDeplacements(' + d.id + "," + b + "," + c + ')">' + d.name + "</a>"))
        }), $("#MoveTab").append("</table>")
    }, "json")
}

function updateInfos(a, b) {
    var c = SERVER_ABSOLUTE_PATH + "/objets/getInfos";
    $.post(c, {
        object: a,
        user: b,
        command: "info"
    }, function(a) {
        $("#divName").html(a.name), $("#deleteElement").html(a.name), $("#divOwner").html(a.owner), $("#divValue").html(a.value + "$"), $("#divInitValue").html(a.initvalue + "$"), $("#divWarranty").html(a.warranty), $("#divSummary").html(a.summary), $("#divInfo").html(a.info), $("#divQuantity").html(a.quantity), $("#divTotalValue").html(a.totalvalue + "$"), a.container ? $("#divContentValue").show() : $("#divContentValue").hide(), $("#divInfoContentValue").html(a.contentvalue + "$"), $("#txtEditName").val(a.name), $("#txtEditValue").val(a.value), $("#txtEditInitValue").val(a.initvalue), $("#txtEditWarranty").val(a.warranty), $("#txtEditDescription").val(a.summary), $("#txtEditInformation").html(a.info), $("#chkEditPublic").prop("checked", a["public"]), $("txtEditQuantity").val(a.quantity), $.each(a.famille, function(a, b) {
            $("#editExc" + b.id).prop("checked", b.exception)
        }), $(".addExcSwitch").prop("checked", !1)
    }, "json")
}

function openAddItem() {
    $("#addModal").foundation("reveal", "open")
}

function openDeleteItem() {
    $("#deleteModal").foundation("reveal", "open")
}

function submitAddItem() {
    var a = "";
    a += "[";
    var b = !0;
    $(".addExcSwitch").each(function(c, d) {
        b ? b = !1 : a += ",", a += "{";
        var e = 0;
        d.checked && (e = 1), a += '"state":"' + e + '",', a += '"id":"' + d.id.substr(6) + '"', a += "}"
    }), a += "]", target = SERVER_ABSOLUTE_PATH + "/objets/addItem";
    var c = $("#txtAddName").val(),
        d = $("#txtAddInitValue").val(),
        e = $("#txtAddValue").val(),
        f = $("#txtAddWarranty").val(),
        g = $("#txtAddDescription").val(),
        h = $("#txtAddInformation").val(),
        i = $("#chkAddPublic").prop("checked"),
        j = $("#txtAddQuantity").val();
    if (0 == $("#selectedId").length) var k = null;
    else var k = $("#selectedId").html();
    var l = $("#UserId").html();
    $.post(target, {
        parent: k,
        name: c,
        initValue: d,
        value: e,
        warranty: f,
        summary: g,
        infos: h,
        publicItem: i,
        exceptions: a,
        owner: l,
        quantity: j
    }), $("#addModal").foundation("reveal", "close"), clearAddModal(), 0 == $("#ObjectImage").length && location.reload(), $("#selectedId").length || location.reload(), newSelectedObject(k, l)
}

function clearAddModal() {
    $("#txtAddName").val(""), $("#txtAddInitValue").val(""), $("#txtAddValue").val(""), $("#txtAddWarranty").val(""), $("#txtAddDescription").val(""), $("#txtAddInformation").val(""), $("#chkAddPublic").prop("checked", !0), $(".addExcSwitch").removeAttr("checked")
}

function submitDeleteItem() {
    var a = $("#selectedId").html(),
        b = SERVER_ABSOLUTE_PATH + "/objets/deleteItem";
    if ($.post(b, {
            object: a
        }), $("#deleteModal").foundation("reveal", "close"), 0 == $("#parentId").length) location.reload();
    else {
        var c = $("#parentId").html(),
            d = $("#UserId").html();
        newSelectedObject(c, d)
    }
}

function openEditItem() {
    $("#editModal").foundation("reveal", "open")
}

function submitEditItem() {
    var a = "";
    a += "[";
    var b = !0;
    $(".editExcSwitch").each(function(c, d) {
        b ? b = !1 : a += ",", a += "{";
        var e = 0;
        d.checked && (e = 1), a += '"state":"' + e + '",', a += '"id":"' + d.id.substr(7) + '"', a += "}"
    }), a += "]";
    var c = SERVER_ABSOLUTE_PATH + "/objets/editItem",
        d = $("#txtEditName").val(),
        e = $("#txtEditInitValue").val(),
        f = $("#txtEditValue").val(),
        g = $("#txtEditWarranty").val(),
        h = $("#txtEditDescription").val(),
        i = $("#txtEditInformation").val(),
        j = $("#chkEditPublic").prop("checked"),
        k = $("#txtEditQuantity").val();
    if (0 == $("#selectedId").length) throw "No Item -- Something is borked";
    var l = $("#selectedId").html(),
        m = $("#UserId").html();
    $.post(c, {
        object: l,
        name: d,
        initValue: e,
        value: f,
        warranty: g,
        summary: h,
        infos: i,
        publicItem: j,
        exceptions: a,
        owner: m,
        quantity: k
    }), $("#editModal").foundation("reveal", "close"), clearAddModal(), newSelectedObject(l, m)
}

function openMoveItem() {
    $("#moveModal").foundation("reveal", "open")
}

function submitMoveItem(a, b) {
    var c = a,
        d = b,
        e = $("#parentId").html(),
        f = SERVER_ABSOLUTE_PATH + "/objets/moveItem";
    $.post(f, {
        item: c,
        target: d
    }), $("#editModal").foundation("reveal", "close"), newSelectedObject(e, $("#UserId").html())
}

function openLoan() {
    $("#loanModal").foundation("reveal", "open")
}

function submitLoan() {
    var a = $("#selectedId").html(),
        b = $("#cmbloanContaxt").val(),
        c = $("#txtEndOfLoan").val(),
        d = $("#parentId").html(),
        e = SERVER_ABSOLUTE_PATH + "/objets/lendItem";
    $.post(e, {
        object: a,
        contact: b,
        dateEnd: c
    }), $("#loanModal").foundation("reveal", "close"), newSelectedObject(d, $("#UserId").html())
}

function submitSearch() {
    var a = $("#searchInput").val(),
        b = SERVER_ABSOLUTE_PATH + "/objets/getSearch",
        c = $("#selectedId").html(),
        d = $("#UserId").html();
    $.post(b, {
        object: c,
        user: d,
        search: a
    }, function(a) {
        console.dir(a), updateTabItems(a, d)
    }, "json")
}

function UploadImage() {
   // clearImageList(), $("#uploadImageModal input[name='objectId']").val($("#selectedId").html()), $("#uploadImageModal").foundation("reveal", "open")

	$("#uploadImageModal input[name='objectId']").val($("#selectedId").html()), $("#uploadImageModal").foundation("reveal", "open")

}

function loadImages(a) {
	
	
	
    var v = SERVER_ABSOLUTE_PATH + "/objets/getEncodedImagesById";
	
    $.ajax({
        type: 'POST',
        url: v,
        data: {
            objectId: a
        },
        success: function(responseText) {
			
			
			// BUG CORRIGER PAR Michael Lacroix-Roy 05 Février 2016
			
			
			var d = responseText;
            var b = JSON.parse(d);
			
			
			if(b != null)
			{
				b.length > 0 && ($("#currentImage").data("image-id", b[0].ImageId), $("#currentImage").attr("src", b[0].ImageBlob));
				  
				for (var c = 0; c < b.length; c++)
					$("#imageList").append('<li class="th [radius]"><img  data-image-id="' + b[c].ImageId + '" src="' + b[c].ImageBlob + '" alt="Image de l\'objet en cours"></li>')
			}
			
		}
    })
	
	
}

function clearImageList() {
    $("#currentImage").data("image-id", ""), $("#currentImage").attr("src", PUBLIC_ABSOLUTE_PATH + "/assets/no-image.gif"), $("#imageList").empty()
}

function deleteImage(a) {
    var b = SERVER_ABSOLUTE_PATH + "/objets/deleteImage";
    $.post(b, {
        imageId: a
    }, function() {
       clearImageList(), loadImages($("#selectedId").html())
	  // loadImages($("#selectedId").html()), window.location.replace("objets")
    })
}

function EditZones() {
	
	//alert($("#currentImage").data("image-id"));
	
    "" != $("#currentImage").data("image-id") && initZone()
}

function sendZones() {
    var a = SERVER_ABSOLUTE_PATH + "/objets/addZone",
        b = [];
    $("#zones-list :selected").each(function(a, c) {
        b[a] = $(c).val()
    }), canAddZone = !0, $("#activateZoneAddition").trigger("click"), $.ajax({
        type: "POST",
        url: a,
        async: !1,
        data: {
            txtZoneName: b,
            zones: zones,
            imageId: $("#currentImage").data("image-id")
        },
        success: function() {}
    })
}

function getZones(a) {
    var b = SERVER_ABSOLUTE_PATH + "/objets/getZones";
    $.ajax({
        type: "POST",
        url: b,
        async: !1,
        data: {
            imageId: a
        },
        success: function(a) {
            var b = a;
            serverZones = JSON.parse(b)
        }
    })
}

function getObjectList(a) {
    url = SERVER_ABSOLUTE_PATH + "/objets/getVisibleObjects", $.ajax({
        type: "POST",
        url: url,
        async: !1,
        data: {
            objectId: a
        },
        success: function(a) {
            objectList = JSON.parse(a)
        }
    })
}

function loadCanvas() {
    clearCanvas(), $("#zones-list").html(""), getObjectList($("#selectedId").html()), drawImage(), getZones($("#currentImage").data("image-id")), context.strokeStyle = "#00CC00", context.lineWidth = 2;
    var a = 0;
    zones = [];
    for (zone in serverZones) {
        context.beginPath(), zones.push({
            x: serverZones[zone].ZoneX,
            y: serverZones[zone].ZoneY,
            w: serverZones[zone].ZoneWidth,
            h: serverZones[zone].ZoneHeight,
            pointTo: serverZones[zone].ZonePointTo
        }), context.rect(zones[a].x, zones[a].y, zones[a].w, zones[a].h), context.stroke();
        for (var b = "<select name='txtZoneName[]'>", c = 0; c < objectList.length; c++) {
            var d = "";
            serverZones[zone].ZonePointTo == objectList[c].ObjectId && (d = "selected"), b += "<option value='" + objectList[c].ObjectId + "'" + d + ">" + objectList[c].ObjectName + "</option>"
        }
        b += "</select>", $("#zones-list").append("<div data-zone='" + a + "' class='row collapse zone'><div class='small-3 columns'><span class='postfix'>Objet associé</span></div><div class='small-7 columns'>" + b + "</div><input type='hidden' name='zoneId' value=" + (zones.length - 1) + "><div class='small-2 columns'><a href='#' class='button postfix deleteZone'>Supprimer</a></div></div>"), a++
    }
}

function redrawCanvas() {
    clearCanvas(), drawImage(), context.strokeStyle = "#00CC00", context.lineWidth = 2;
    var a = 0;
    zones = [];
    for (zone in serverZones) context.beginPath(), zones.push({
        x: serverZones[zone].ZoneX,
        y: serverZones[zone].ZoneY,
        w: serverZones[zone].ZoneWidth,
        h: serverZones[zone].ZoneHeight,
        pointTo: serverZones[zone].ZonePointTo
    }), context.rect(zones[a].x, zones[a].y, zones[a].w, zones[a].h), context.stroke(), a++
}

function initZone() {
    $("#zoneModal").foundation("reveal", "open"), imageObj.src = $("#currentImage").prop("src"), loadCanvas(), canvas.addEventListener("mousedown", onMouseDown, !1), canvas.addEventListener("mousemove", onMouseMove, !1)
}

function contains(a, b) {
    var c = {
            x: a,
            y: b,
            w: 1,
            h: 1
        },
        d = {
            x: 0,
            y: 0,
            w: 0,
            h: 0
        };
    for (zone in zones)
        if (zones[zone].x = Number(zones[zone].x), zones[zone].y = Number(zones[zone].y), zones[zone].w = Number(zones[zone].w), zones[zone].h = Number(zones[zone].h), d = zones[zone].w > 0 ? zones[zone].h > 0 ? {
                x: zones[zone].x,
                y: zones[zone].y,
                w: zones[zone].w + zones[zone].x,
                h: zones[zone].h + zones[zone].y
            } : {
                x: zones[zone].x,
                y: zones[zone].y + zones[zone].h,
                w: zones[zone].w + zones[zone].x,
                h: zones[zone].y
            } : zones[zone].h > 0 ? {
                x: zones[zone].x + zones[zone].w,
                y: zones[zone].y,
                w: zones[zone].x,
                h: zones[zone].h + zones[zone].y
            } : {
                x: zones[zone].x + zones[zone].w,
                y: zones[zone].y + zones[zone].h,
                w: zones[zone].x,
                h: zones[zone].y
            }, c.x > d.x && c.x < d.w && c.y > d.y && c.y < d.h) return hoveredZoneId = zones[zone].pointTo, !0;
    return !1
}

function onMouseDown(a) {
    var b = getMousePos(canvas, a);
    if (canAddZone) {
        if (objectList.length > 0 && $("#zones-list select").length < objectList.length)
            if (null == firstX) firstX = b.x, firstY = b.y;
            else {
                if (zones.length < objectList.length) {
                    zones.push({
                        x: firstX,
                        y: firstY,
                        w: b.x - firstX,
                        h: b.y - firstY
                    });
                    for (var c = "<select name='txtZoneName[]'>", d = 0; d < objectList.length; d++) c += "<option value='" + objectList[d].ObjectId + "'>" + objectList[d].ObjectName + "</option>";
                    c += "</select>", $("#zones-list").append("<div class='row collapse zone'><div class='small-3 columns'><span class='postfix'>Objet associé</span></div><div class='small-7 columns'>" + c + "</div><input type='hidden' name='zoneId' value=" + (zones.length - 1) + "><div class='small-2 columns'><a href='#' class='button postfix deleteZone'>Supprimer</a></div></div>")
                }
                firstX = null, firstY = null
            }
    } else contains(b.x, b.y) && (location.href = SERVER_ABSOLUTE_PATH + "/objets/show/" + zones[zone].pointTo)
}

function onMouseMove(a) {
    var b = getMousePos(canvas, a);
    if (null != firstX) clearCanvas(), context.beginPath(), context.strokeStyle = "#00CC00", context.lineWidth = 2, drawImage(), context.rect(firstX, firstY, b.x - firstX, b.y - firstY), context.stroke();
    else if (!canAddZone)
        if (contains(b.x, b.y)) {
            for (var c = "", d = 0; d < objectList.length; d++) objectList[d].ObjectId == hoveredZoneId && (c = objectList[d].ObjectName);
            redrawCanvas(), context.beginPath(), context.fillStyle = "#0E628A", context.font = "24px Arial", context.fillText(c, b.x + 10, b.y + 10)
        } else redrawCanvas()
}

function clearCanvas() {
    context.clearRect(0, 0, canvas.width, canvas.height)
}

function drawImage() {
    context.drawImage(imageObj, 0, 0, canvas.width, canvas.height)
}

function getMousePos(a, b) {
    var c = a.getBoundingClientRect();
    return {
        x: b.clientX - c.left,
        y: b.clientY - c.top
    }
}

function generateSimpleReport() {
    var a = $("#selectedId").html(),
        b = SERVER_ABSOLUTE_PATH + "/objets/generateReport";
    $.post(b, {
        object: a
    }, function(a) {
        $("body").html(a)
    })
}

function generateCompleteReport() {
    var a = $("#selectedId").html(),
        b = SERVER_ABSOLUTE_PATH + "/objets/generateFullReport";
    $.post(b, {
        object: a
    }, function(a) {
        $("body").html(a)
    })
}

function openReport() {
    $("#reportModal").foundation("reveal", "open")
}
$.getScript("config.min.js"), $.getScript(PUBLIC_ABSOLUTE_PATH + "/libs/qrcode.min.js"), $(document).foundation(), $(document).foundation("abide", "events");
var canvas = document.getElementById("zone-maker"),
    context = canvas.getContext("2d"),
    imageObj = new Image,
    zones = [],
    firstX, firstY, objectList, serverZones = [],
    canAddZone = !1,
    hoveredZoneId = 0;
	
	
$(document).ready(function() {
    $("#btnAddItem").click(function() {
        openAddItem()
    }), $("#btnRemoveItem").click(function() {
        openDeleteItem()
    }), $("#btnEditItem").click(function() {
        openEditItem()
    }), $("#btnMoveItem").click(function() {
        openMoveItem()
    }), $("#btnLendItem").click(function() {
        openLoan()
    }), $("#btnCreateReport").click(function() {
        openReport()
    }), $("#btnSearch").click(function() {
        submitSearch()
    }), $("#frmAddObject").on("valid", function() {
        submitAddItem()
    }), $("#btnDelete").click(function() {
        submitDeleteItem()
    }), $("#btnReportSimple").click(function() {
        generateSimpleReport()
    }), $("#btnReportFull").click(function() {
        generateCompleteReport()
    }), $("#btnQrCode").click(function() {
        submitQrCode()
    }), $("#frmEditObject").on("valid", function() {
        submitEditItem()
    }), $("#frmLoan").on("valid", function() {
        submitLoan()
    }), $("#btnEditZones").click(function() {
        EditZones()
    }), $("#currentImage").click(function() {
        EditZones()
    }), $("#btnUploadImage").click(function() {
        UploadImage()
    }), $("div").on({
        mouseenter: function() {
            if (!canAddZone) {
                var a = $(this).data("zone");
                context.beginPath(), context.strokeStyle = "#008cba", context.lineWidth = 5, context.rect(zones[a].x, zones[a].y, zones[a].w, zones[a].h), context.stroke()
            }
        },
        mouseleave: function() {
            canAddZone || (context.lineWidth = 2, context.strokeStyle = "#00CC00", loadCanvas())
        }
    }, ".zone")
}), $(document).on("opened", "[data-reveal]", function() {
    $("#txtAddName").first().focus()
});
var myDropzone = new Dropzone("form.uploadBox", {
    paramName: "file",
    maxFilesize: 1,
    addRemoveLinks: !0,
    thumbnailWidth: "250",
    thumbnailHeight: "250",
    dictRemoveFile: "Retirer",
    acceptedFiles: "image/*",
    autoProcessQueue: !1,
    autoDiscover: !1,
    init: function() {
        this.on("addedfile", function() {
            null != this.files[1] && this.removeFile(this.files[0])
        })
    }
});
myDropzone.on("complete", function(a) {
    myDropzone.removeFile(a)
}), $("#submitImage").click(function() {
    clearImageList(), myDropzone.processQueue(), $("#uploadImageModal").foundation("reveal", "close"), loadImages($("#selectedId").html())
   // myDropzone.processQueue(), $("#uploadImageModal").foundation("reveal", "close"), loadImages($("#selectedId").html())
}), $("#imageList").on("click", " li img", function() {
    $("#currentImage").data("image-id", $(this).data("image-id")), $("#currentImage").prop("src", $(this).prop("src"))
}), $("#btnDeleteImage").click(function() {
    "" != $("#currentImage").data("image-id") && deleteImage($("#currentImage").data("image-id"))
}), $("#activateZoneAddition").click(function() {
    canAddZone ? (canAddZone = !1, $(this).removeClass("success"), $(this).addClass("info"), $(this).empty().append('Activer l\'ajout de zone <i class="fa fa-unlock"></i>')) : (canAddZone = !0, $(this).removeClass("info"), $(this).addClass("success"), $(this).empty().append('Désactiver l\'ajout de zone <i class="fa fa-lock"></i>'))
}), $("#zones-list").on("focus", "input[type=text]", function() {
    var a = $(this).parent().next().val();
    clearCanvas(), context.beginPath(), context.strokeStyle = "#FF0000", context.lineWidth = 2, context.rect(zones[a].x, zones[a].y, zones[a].w, zones[a].h), drawImage(), context.stroke()
}), $("#btnSubmitZones").click(function() {
    sendZones(), $("#zoneModal").foundation("reveal", "close")
}), $("#btnCloseZoneModal").click(function() {
    sendZones()
}), $("#zones-list").on("click", ".deleteZone", function() {
    zones.splice($(this).parent().prev().val(), 1), clearCanvas(), drawImage(), $(this).parent().parent().remove(), sendZones(), loadCanvas()
});